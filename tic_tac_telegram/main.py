import os
import random as r
import sys
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler,\
     MessageHandler, filters, Application

import strings_en as st


# –ø–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
def getToken():
    token = ''
    if os.path.isfile(st.BOT_TOKEN_FILENAME):
        f = open(st.BOT_TOKEN_FILENAME, "r")
        token = f.read()
        f.close()
    else:
        print(st.ALERT_ABOUT_TOKEN)
        sys.exit()  # –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞0
    return token

#—Å–æ—á–µ—Ç–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã
victory = [(0, 1, 2),
           (3, 4, 5),
           (6, 7, 8),
           (0, 3, 6),
           (1, 4, 7),
           (2, 5, 8),
           (0, 4, 8),
           (2, 4, 6)]

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
def chek_victory(field):
    if any(all(field[i] == st.SYMBOL_X for i in victory[j]) for j in range(8)):
        return st.SYMBOL_X
    if any(all(field[i] == st.SYMBOL_O for i in victory[j]) for j in range(8)):
        return st.SYMBOL_O
    return False

# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ (—Ç.–µ. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å)
# cellArray - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callBackData, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ callBack-–∫–Ω–æ–ø–∫—É
def countUndefinedCells(cellArray):
    return ''.join(cellArray).count(st.SYMBOL_UNDEF)


# –≤—ã–±–æ—Ä —Ö–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç
def bot_choice_student(field):
#–µ—Å–ª–∏ –≤ —Ä—è–¥—É –¥–≤–∞ O –∏ –Ω–µ—Ç –•
    temp = []
    for index in victory:
        if (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_O) == 2\
            and (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_X) == 0:
            temp = [i for i in (index[0], index[1], index[2]) if field[i]!=st.SYMBOL_O][0]
            return temp
#–µ—Å–ª–∏ –≤ —Ä—è–¥—É –¥–≤–∞ X –∏ –Ω–µ—Ç –û
    for index in victory:
        if (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_X) == 2\
            and (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_O) == 0:            
            temp = [i for i in (index[0], index[1], index[2]) if field[i] !=st.SYMBOL_X][0]
            return temp
#–≤ —Ä—è–¥—É –æ–¥–∏–Ω –û –∏ –Ω–µ—Ç X
    for index in victory:
        if (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_X) == 0 \
            and (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_O) == 1:            
            temp = r.choice([i for i in (index[0], index[1], index[2]) if field[i]!=st.SYMBOL_O])
            return temp

#–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä –∏–ª–∏ –≤ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
    if st.SYMBOL_O not in field:
        if field[4] != st.SYMBOL_X:
            return 4
        else:
            return 2
#–¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    else:
        temp = r.choice([i for i in range(9) if field[i] not in [st.SYMBOL_X, st.SYMBOL_O]])
        return temp

# # –≤—ã–±–æ—Ä —Ö–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —à–∫–æ–ª—å–Ω–∏–∫
# def bot_choice_school(field):
# #–µ—Å–ª–∏ –≤ —Ä—è–¥—É –¥–≤–∞ O –∏ –Ω–µ—Ç –•
#     for index in victory:
#         if (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_O) == 2\
#             and (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_X) == 0:
#             temp = [i for i in (index[0], index[1], index[2]) if field[i]!=st.SYMBOL_O][0]
#             return temp
# #–µ—Å–ª–∏ –≤ —Ä—è–¥—É –¥–≤–∞ X –∏ –Ω–µ—Ç –û
#     for index in victory:
#         if (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_X) == 2\
#             and (field[index[0]], field[index[1]], field[index[2]]).count(st.SYMBOL_O) == 0:            
#             temp = [i for i in (index[0], index[1], index[2]) if field[i] !=st.SYMBOL_X][0]
#             return temp
#     temp = r.choice([i for i in range(9) if field[i] not in [st.SYMBOL_X, st.SYMBOL_O]])
#     return temp

# # –≤—ã–±–æ—Ä —Ö–æ–¥–∞ –¥–ª—è –±–æ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–ª–∞–¥–µ–Ω–µ—Ü
# def bot_choice_baby(field):
#     temp = r.choice([i for i in range(9) if field[i] not in [st.SYMBOL_X, st.SYMBOL_O]])
#     return temp




# callBackData —Ñ–æ—Ä–º–∞—Ç:
# n????????? - –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
# n - –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏
# ? - –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–µ—Ç–∫–∏: —Å–º–æ—Ç—Ä–∏ –º–æ–¥—É–ª—å strings, —Ä–∞–∑–¥–µ–ª "—Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è"
# –ø—Ä–∏–º–µ—Ä: 5‚ùé‚ùéüÖæüÖæ‚ùé‚ùé‚óª‚óª‚ùé
# –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –ø—è—Ç–∞—è –∫–Ω–æ–ø–∫–∞, –∏ —Ç–µ–∫—É—â–∏–π –≤–∏–¥ –ø–æ–ª—è:
# ‚ùé‚ùéüÖæ
# üÖæ‚ùé‚ùé
# ‚¨ú ‚¨ú‚ùé
# –¥–∞–Ω–Ω—ã–µ –æ–±–æ –≤—Å–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –∫–Ω–æ–ø–∫—É, 
# —Ç.–∫. –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# –∏–≥—Ä–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞ –∫—Ä–µ—Å—Ç–∏–∫–æ–º, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –∫—Ä–µ—Å—Ç–∏–∫–∞, —Ö–æ–¥ –±–æ—Ç–∞ (–Ω–æ–ª–∏–∫–æ–º), –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –±–æ—Ç–æ–º
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
# message - —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
# callBackData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è callBack –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
# async def Choose_regime_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     keyboard = [
#         [InlineKeyboardButton("–ú–ª–∞–¥–µ–Ω–µ—Ü", callback_data="1")],
#         [InlineKeyboardButton("–®–∫–æ–ª—å–Ω–∏–∫", callback_data="2"),],
#         [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data="3")],
#     ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã:", reply_markup=reply_markup)



async def newGame(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å callBack –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã, —Ç–æ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—é—â—É—é –∏–∑ 9 –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    data = ''
    for i in range(0, 9):
        data += st.SYMBOL_UNDEF
    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    await update.message.reply_text(st.ANSW_YOUR_TURN, reply_markup=InlineKeyboardMarkup(getKeyboard(data)))
    

def game(callBackData):
    # message  -  –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message
    message = st.ANSW_YOUR_TURN  # —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä–Ω–µ—Ç—Å—è
    alert = None
    buttonNumber = int(callBackData[0])  # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –µ–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
    if not buttonNumber == 9:  # —Ü–∏—Ñ—Ä–∞ 9 –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏. –¢.–µ. –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ü–∏—Ñ—Ä–∞ 9, —Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ
        charList = list(callBackData)  # —Å—Ç—Ä–æ—á–∫–∞ callBackData —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ "123" -> ['1', '2', '3']
        charList.pop(0)  # —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∏
        if charList[buttonNumber] == st.SYMBOL_UNDEF:  # –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ –Ω–µ –≤—ã–±—Ä–∞–Ω –∫—Ä–µ—Å—Ç–∏–∫/–Ω–æ–ª–∏–∫, —Ç–æ –º–æ–∂–Ω–æ —Ç—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –∫—Ä–µ—Å—Ç–∏–∫—É
            charList[buttonNumber] = st.SYMBOL_X  # —ç–º—É–ª—è—Ü–∏—è —Ö–æ–¥–∞ –∫—Ä–µ—Å—Ç–∏–∫–∞
            if chek_victory(charList):  # –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∫—Ä–µ—Å—Ç–∏–∫ –ø–æ—Å–ª–µ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞
                message = st.ANSW_YOU_WIN
            else:  # –µ—Å–ª–∏ –∫—Ä–µ—Å—Ç–∏–∫ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª, —Ç–æ –º–æ–∂–µ—Ç —Å—Ö–æ–¥–∏—Ç –±–æ—Ç, —Ç.–µ. –Ω–æ–ª–∏–∫
                if countUndefinedCells(charList) != 0:  # –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è —Ö–æ–¥–∞
                    # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —Ö–æ–¥–∏—Ç –±–æ—Ç (–Ω–æ–ª–∏–∫)
                    buttonNumber = bot_choice_student(charList)
                    charList[buttonNumber] = st.SYMBOL_O
                    if chek_victory(charList):  # –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –±–æ—Ç –ø–æ—Å–ª–µ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞
                        message = st.ANSW_BOT_WIN
        # –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª –ø–æ—Ö–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–Ω—è—Ç–∞:
        else:
            alert = st.ALERT_CANNOT_MOVE_TO_THIS_CELL

        # –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è —Ö–æ–¥–∞ –∏ —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å (–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç, –∏ —á—Ç–æ —ç—Ç–æ –±—ã–ª –Ω–µ –æ—à–∏–±–æ—á–Ω—ã–π —Ö–æ–¥)
        if countUndefinedCells(charList) == 0 and message == st.ANSW_YOUR_TURN:
            message = st.ANSW_DRAW

        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏ callBackData –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–¥–µ–ª–∞–Ω–Ω–æ–≥–æ —Ö–æ–¥–∞
        callBackData = ''
        for c in charList:
            callBackData += c

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å (message —Ä–∞–≤–Ω–æ –æ–¥–Ω–æ–º—É –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ø–æ–±–µ–¥–∏–ª –•, 0 –∏–ª–∏ –Ω–∏—á—å—è):
    if message == st.ANSW_YOU_WIN or message == st.ANSW_BOT_WIN or message == st.ANSW_DRAW:
        message += '\n'
    #–≤—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø–æ–ª—è
        for i in range(0, 3):
            message += '\n | '
            for j in range(0, 3):
                message += callBackData[j + i * 3] + ' | '
        callBackData = None  # –æ–±–Ω—É–ª–µ–Ω–∏–µ callBackData

    return message, callBackData, alert

# –§–æ—Ä–º–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã InlineKeyboardMarkup(keyboard)
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞
# –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç callBackData - –¥–∞–Ω–Ω—ã–µ —Å callBack-–∫–Ω–æ–ø–∫–∏

def getKeyboard(callBackData):
    keyboard = [[], [], []]  # –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç—Å—è

    if callBackData != None:  # –µ—Å–ª–∏
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for i in range(0, 3):
            for j in range(0, 3):
                keyboard[i].append(InlineKeyboardButton(callBackData[j + i * 3], callback_data=str(j + i * 3) + callBackData))
    return keyboard


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    callbackData = query.data
    message, callbackData, alert = game(callbackData)
    if alert is None:  # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª —Ç—Ä–µ–≤–æ–≥–∏ (alert==None), —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await query.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç, –∏–Ω–∞—á–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º
        await query.edit_message_text(text=message, reply_markup=InlineKeyboardMarkup(getKeyboard(callbackData)))
    else:
        await query.answer(text=alert, show_alert=True)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Displays info on how to use the bot."""
    await update.message.reply_text(st.ANSW_HELP)

def main():
    application = Application.builder().token(getToken()).build()
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', newGame))
    application.add_handler(CommandHandler('new_game', newGame))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(MessageHandler(filters.TEXT, help_command))  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    application.add_handler(CallbackQueryHandler(button))  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ CallBack –∫–Ω–æ–ø–∫–∏
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
